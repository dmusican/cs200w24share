#+title: Test2

#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Lecture 1 csc116
#+CATEGORY:
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:R               :results output  :colnames yes
#+PROPERTY: header-args:C++             :results output  :flags -std=c++17 -Wall --pedantic -Werror

* Table of contents                                                     :TOC:
- [[#what-is-c][What is c++]]
- [[#the-c-we-are-going-to-learn][The C++ we are going to learn]]
- [[#simpler-constructs-than-c][Simpler constructs than C]]
- [[#learning-a-language][Learning a language]]
- [[#c-example][C++ Example:]]
- [[#simplest-program][Simplest program]]
- [[#hello-world][Hello world]]
- [[#readwrite-fromto-standard-inputoutput][Read/write from/to standard input/output]]
- [[#type-safety][Type safety]]
- [[#vectors-not-arrays][Vectors not Arrays]]
     - [[#they-are-safer-to-use][They are safer to use]]
     - [[#use-at][Use .at()]]
     - [[#why-hardcode-the-length][Why hardcode the length?]]
- [[#nah-these-for-loops-are-obsolete-use-an-iterator][Nah, these "for" loops are obsolete, use an iterator]]
- [[#but-they-also-make-for-very-generic-code][But they also make for very generic code]]
- [[#c-has-a-large-set-of-algorithms][C++ has a large set of "algorithms"]]
     - [[#algorithms-are-generic][Algorithms are generic]]
     - [[#we-can-also-accumulate-strings][We can also accumulate strings:]]
- [[#but-wait-there-is-more-we-can-create-our-own-generic-algorithms][But wait, there is more: we can create our own generic algorithms]]
- [[#conclusion][Conclusion]]

* What is c++

- Type safe
- Object oriented
- Functional programming features
- Powerful standard library
  - data types
  - algorithms
- Generic programming
- Much, much better than C

* The C++ we are going to learn

- Modern C++
- also known as C++ 17
- Do not waste your time learning older C++


* Simpler constructs than C

| std::vector<type>  |
| std::string        |
| auto variables     |
| improved for loops |


* Learning a language

- Learn the syntax
- Learn the semantics
- Learn the idioms
- Learn the tools

* C++ Example:

- count frequency of elements in an "array" (a vector)

#+BEGIN_SRC C++ :main no :flags -std=c++17 :results output
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <algorithm>

int main()
{
   std::vector<std::string> names {"Canada", "Japan", "Spain", "Japan", "Italy", "Canada", "Japan"};
   std::map <std::string, int> frequency {};
   for (auto n : names) {
       frequency[n] ++;
   }
   for (auto f : frequency) {
       std::cout << "The frequency of " << f.first << " is " << f.second << std::endl;
   }
   std::cout << "--------------------" << std::endl;
   std::for_each(frequency.begin(),
                 frequency.end(),
                 [](auto &a){ std::cout << "The frequency of " << a.first << " is " << a.second << std::endl;});
   return 0;
}

#+END_SRC

#+RESULTS:
: The frequency of Canada is 2
: The frequency of Italy is 1
: The frequency of Japan is 3
: The frequency of Spain is 1
: --------------------
: The frequency of Canada is 2
: The frequency of Italy is 1
: The frequency of Japan is 3
: The frequency of Spain is 1
